rules = {}


def rule(name, _rule):
    rules[name] = _rule


def zero_many(*rules):
    pass


def any(*rules):
    for rule in rules:
        parser = get_parser(rule)
        if parser:
            return parser
    return



class ZeroManyParser:
    pass


token('*')
token('[')
token(']')


rule('root'           , zero_many('expression'))

rule('expression'     , any('tag', 'relation', 'value'))

rule('relation'       , seq('path', 'sign', 'value'))

rule('path'           , seq('keyword', zero_many('access', 'keyword')))

rule('keyword'        , any('name', 'concept', 'log', 'alias', 'cache', 'format', 'meta', 'doc'))

rule('value'          , any('reference', 'literal', 'list', 'object'))

rule('reference'      , seq('head-ref', zero_many('access', 'tail-ref')))
rule('head-ref'       , any('query', 'keyword'))
rule('tail-ref'       , any('head-ref', 'range', 'int', 'tag', 'list', 'object', 'wildcard'))

rule('literal'        , any('int', 'float', 'string', 'template-string', 'boolean'))

rule('list'           , seq('[', zero_many('value'), ']'))

rule('object'         , seq('(', 'object-key', zero_many('expression'), ')'))
rule('object-key'     , any('path', 'anonym-path', 'default-format', 'default-doc'))

rule('query'          , seq('{', 'query-key', zero_many('expression'), '}'))
rule('query-key'      , any('path', 'anonym-path'))

rule('sign'           , any('=', '!=', '<', '<=', '>', '>=', '><', '<>'))

rule('tag'            , seq('#', 'name'))
rule('log'            , seq('!', 'name'))
rule('alias'          , seq('@', 'name'))
rule('cache'          , seq('$', 'name'))
rule('format'         , seq('%', 'name'))
rule('meta'           , seq('.', 'name'))
rule('doc'            , seq('?', 'name'))

rule('access'         , any('/', '.'))
rule('wildcard'       , '*')

rule('default-doc'    , '?:')
rule('default-format' , '%:')
rule('anonym-path'    , ':')
